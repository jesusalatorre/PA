El programa thread5.c   muestra el uso de semaforos en un problema de productor consumidor.

Define que es un MUTEX. documenta el uso de pthread_mutex_lock y pthread_mutex_unlock. tu respuesta usando MLA

Un MUTEX es una bandera mutuamente exclusiva, muy similar a un semáforo binario.
int pthread_mutex_lock(pthread_mutex_t *mutex); donde *mutex se refiere a la bandera que se desea cerrar.
int pthread_mutex_unlock(pthread_mutex_t *mutex); donde *mutex se refiere a la bandera que se desea abrir o hacer disponible.

modifique el programa contador.c   para que use este modelo con 1 hilo adicional. Use el comando time para medir el tiempo de ejecucion.

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <limits.h>

void *thread_function(void *arg);
pthread_mutex_t work_mutex; /* protects both work_area and time_to_exit */
int micontador = 0;

int main(){
    int res;
    pthread_t a_thread;
    void *thread_result;

    res = pthread_mutex_init(&work_mutex, NULL);
    if (res != 0) {
            perror("Mutex initialization failed");
            exit(EXIT_FAILURE);
    }
    res = pthread_create(&a_thread, NULL, thread_function, NULL);
    if (res != 0) {
            perror("Thread creation failed");
            exit(EXIT_FAILURE);
    }
    printf("Waiting for thread to finish...\n");
    res = pthread_join(a_thread, &thread_result);
    if (res != 0) {
            perror("Thread join failed");
            exit(EXIT_FAILURE);
    }
    exit(EXIT_SUCCESS);

}

void *thread_function(void *arg) {
    sleep(1);
    pthread_mutex_lock(&work_mutex);

        for (micontador; micontador < INT_MAX; micontador ++);
        printf( "INT_MAX = %d y contador = %d \n",INT_MAX, micontador);

    pthread_mutex_unlock(&work_mutex);
    pthread_exit(0);
}

modifique su codigo para que use 4 hilos en total. para que los 4 modifiquen  el contador. Use el comando time para medir el tiempo de ejecucion.

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <limits.h>

void *thread_function(void *arg);
pthread_mutex_t work_mutex; /* protects both work_area and time_to_exit */
int micontador = 0;

int main(){
    int res;
    pthread_t a_thread;
    void *thread_result;

    res = pthread_mutex_init(&work_mutex, NULL);
    if (res != 0) {
            perror("Mutex initialization failed");
            exit(EXIT_FAILURE);
    }
    res = pthread_create(&a_thread, NULL, thread_function, NULL);
    if (res != 0) {
            perror("Thread creation failed");
            exit(EXIT_FAILURE);
    }

    res = pthread_create(&a_thread, NULL, thread_function, NULL);
    if (res != 0) {
            perror("Thread creation failed");
            exit(EXIT_FAILURE);
    }

    res = pthread_create(&a_thread, NULL, thread_function, NULL);
    if (res != 0) {
            perror("Thread creation failed");
            exit(EXIT_FAILURE);
    }

    res = pthread_join(a_thread, &thread_result);
    if (res != 0) {
            perror("Thread join failed");
            exit(EXIT_FAILURE);
    }
    printf("Thread joined");

    exit(EXIT_SUCCESS);
}

void *thread_function(void *arg) {
    sleep(1);
    pthread_mutex_lock(&work_mutex);

        for (micontador; micontador < INT_MAX; micontador ++);
        printf( "INT_MAX = %d y contador = %d \n",INT_MAX, micontador);

    pthread_mutex_unlock(&work_mutex);
    pthread_exit(0);
}

¿Es más rapido que el serial? Especule sobre posibles razones.

    Sí es más rápido que el serial, pero no por mucho. El mismo trabajo llevandose a cabo no es paralelizable verdaderamente.
